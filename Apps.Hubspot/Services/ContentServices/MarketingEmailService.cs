using Apps.Hubspot.Api;
using Apps.Hubspot.Constants;
using Apps.Hubspot.HtmlConversion;
using Apps.Hubspot.Models.Dtos;
using Apps.Hubspot.Models.Dtos.Emails;
using Apps.Hubspot.Models.Requests.Content;
using Apps.Hubspot.Models.Requests.Emails;
using Apps.Hubspot.Models.Responses;
using Apps.Hubspot.Models.Responses.Content;
using Apps.Hubspot.Services.ContentServices.Abstract;
using Blackbird.Applications.Sdk.Common.Exceptions;
using Blackbird.Applications.Sdk.Common.Invocation;
using Blackbird.Applications.Sdk.Utils.Extensions.Files;
using Blackbird.Applications.Sdk.Utils.Extensions.Http;
using Blackbird.Applications.Sdk.Utils.Extensions.String;
using Newtonsoft.Json.Linq;
using RestSharp;

namespace Apps.Hubspot.Services.ContentServices;

public class MarketingEmailService(InvocationContext invocationContext) : BaseContentService(invocationContext)
{
    public override async Task<List<Metadata>> SearchContentAsync(Dictionary<string, string> query, SearchContentRequest searchContentRequest)
    {
        var endpoint = $"{ApiEndpoints.MarketingEmailsEndpoint}".WithQuery(query);
        var request = new HubspotRequest(endpoint, Method.Get, Creds);

        var response = await Client.Paginate<MarketingEmailDto>(request);
        return response.Select(ConvertEmailToMetadata).ToList();
    }

    public override async Task<Metadata> GetContentAsync(string id)
    {
        var endpoint = $"{ApiEndpoints.MarketingEmailsEndpoint}{id}";
        var request = new HubspotRequest(endpoint, Method.Get, Creds);
        var email = await Client.ExecuteWithErrorHandling<MarketingEmailDto>(request);
        return ConvertEmailToMetadata(email);
    }

    public override Task<TranslatedLocalesResponse> GetTranslationLanguageCodesAsync(string id)
    {
        throw new PluginMisconfigurationException("This operation is not supported for marketing email content type. The Hubspot API does not provide translations for email content type.");
    }

    public override async Task<Stream> DownloadContentAsync(string id)
    {
        var endpoint = $"{ApiEndpoints.MarketingEmailsEndpoint}{id}";
        var request = new HubspotRequest(endpoint, Method.Get, Creds);
        var email = await Client.ExecuteWithErrorHandling<EmailContentDto>(request);
        var html = HtmlConverter.ToHtml(email.Content, email.Name, email.Language, id, ContentTypes.Email, null, null, null, email.Subject , email.BusinessUnitId);

        return new MemoryStream(html);
    }

    public override async Task<Metadata> UpdateContentFromHtmlAsync(string targetLanguage, Stream stream, UploadContentRequest uploadContentRequest)
    {
        var fileBytes = await stream.GetByteData();
        var blackbirdId = HtmlConverter.ExtractBlackbirdId(fileBytes);

        if (blackbirdId == null)
        {
            throw new PluginMisconfigurationException("Marketing email ID is required. Please make sure that HTML file was generated by Hubspot app or set 'Create new' to true to create a new email instead.");
        }

        var subject = HtmlConverter.ExtractSubject(fileBytes);
        var titleText = HtmlConverter.ExtractTitle(fileBytes);
        var language = HtmlConverter.ExtractLanguage(fileBytes);
        var businessUnitId = HtmlConverter.ExtractBusinessUnitId(fileBytes);

        using var stringStream = new MemoryStream(fileBytes);
        var (pageInfo, json) = HtmlConverter.ToJson(stringStream);

        var updatedContent = new Content
        {
            FlexAreas = json["flexAreas"] as JObject,
            Widgets = json["widgets"] as JObject,
            StyleSettings = json["styleSettings"] as JObject,
            TemplatePath = json["templatePath"]?.ToString(),
            PlainTextVersion = json["plainTextVersion"]?.ToString() ?? ""
        };

        if (uploadContentRequest.CreateNew == true)
        {
            return await CreateNewEmailFromHtmlAsync(blackbirdId, titleText, targetLanguage ?? language, businessUnitId, subject, updatedContent);
        }
        else
        {
            return await UpdateExistingEmailFromHtmlAsync(blackbirdId, titleText, language, businessUnitId, subject, updatedContent);
        }
    }

    public override async Task<Metadata> UpdateContentAsync(string id, UpdateContentRequest updateContentRequest)
    {
        var endpoint = $"{ApiEndpoints.MarketingEmailsEndpoint}{id}";
        var request = new HubspotRequest(endpoint, Method.Patch, Creds)
            .WithJsonBody(new
            {
                name = updateContentRequest.Title
            }, JsonConfig.Settings);

        var email = await Client.ExecuteWithErrorHandling<MarketingEmailDto>(request);
        return ConvertEmailToMetadata(email);
    }

    public override Task DeleteContentAsync(string id)
    {
        var endpoint = $"{ApiEndpoints.MarketingEmailsEndpoint}{id}";
        var request = new HubspotRequest(endpoint, Method.Delete, Creds);
        return Client.ExecuteWithErrorHandling(request);
    }

    private Metadata ConvertEmailToMetadata(MarketingEmailDto email)
    {
        return new Metadata
        {
            Id = email.Id,
            Title = email.Name,
            Domain = email.ActiveDomain,
            Language = email.Language!,
            State = email.State,
            Published = email.IsPublished,
            Type = ContentTypes.Email,
            CreatedAt = email.CreatedAt,
            Subject = email.Subject,
            Url = string.Empty,
            Slug = string.Empty,
            UpdatedAt = email.UpdatedAt ?? DateTime.MinValue
        };
    }

    private async Task<Metadata> CreateNewEmailFromHtmlAsync(string emailId, string? titleText, string language, string? businessUnitId, string? subject, Content updatedContent)
    {
        var email = await GetEmail(emailId);

        var createMarketingEmailRequest = new CreateMarketingEmailRequest
        {
            Name = string.IsNullOrEmpty(titleText) ? emailId : titleText,
            Language = language,
            BusinessUnitId = businessUnitId,
            Subject = string.IsNullOrEmpty(subject) ? email.Subject : subject
        };

        var createRequest = new HubspotRequest(ApiEndpoints.MarketingEmailsEndpoint, Method.Post, Creds)
            .WithJsonBody(createMarketingEmailRequest, JsonConfig.Settings);

        if (!string.IsNullOrEmpty(createMarketingEmailRequest.BusinessUnitId))
        {
            createRequest.AddQueryParameter("businessUnitId", createMarketingEmailRequest.BusinessUnitId);
        }

        var newEmail = await Client.ExecuteWithErrorHandling<MarketingEmailDto>(createRequest);

        var updateEmailDto = new MarketingEmailOptionalRequest
        {
            Content = updatedContent
        };

        var updateEmailEndpoint = $"{ApiEndpoints.MarketingEmailsEndpoint}{newEmail.Id}";
        var updateEmailRequest = new HubspotRequest(updateEmailEndpoint, Method.Patch, Creds)
            .WithJsonBody(updateEmailDto, JsonConfig.Settings);

        var emailDto = await Client.ExecuteWithErrorHandling<MarketingEmailDto>(updateEmailRequest);
        return ConvertEmailToMetadata(emailDto);
    }

    private async Task<Metadata> UpdateExistingEmailFromHtmlAsync(string emailId, string? titleText, string? language, string? businessUnitId, string? subject, Content updatedContent)
    {
        var email = await GetEmail(emailId);

        var requestPayload = new MarketingEmailOptionalRequest
        {
            Subject = subject ?? email.Subject,
            Name = string.IsNullOrEmpty(titleText) ? email.Name : titleText,
            Language = string.IsNullOrEmpty(language) ? email.Language : language,
            BusinessUnitId = string.IsNullOrEmpty(businessUnitId) ? email.BusinessUnitId : businessUnitId,
            Content = updatedContent
        };

        var endpoint = $"{ApiEndpoints.MarketingEmailsEndpoint}{emailId}";
        var request = new HubspotRequest(endpoint, Method.Patch, Creds)
            .WithJsonBody(requestPayload, JsonConfig.Settings);

        var emailDto = await Client.ExecuteWithErrorHandling<MarketingEmailDto>(request);
        return ConvertEmailToMetadata(emailDto);
    }

    private Task<EmailContentDto> GetEmail(string emailId)
    {
        var endpoint = $"{ApiEndpoints.MarketingEmailsEndpoint}{emailId}";
        var request = new HubspotRequest(endpoint, Method.Get, Creds);

        return Client.ExecuteWithErrorHandling<EmailContentDto>(request);
    }
}