using System.Web;
using Apps.Hubspot.Models.Dtos.Emails;
using Apps.Hubspot.Models.Dtos.Forms;
using Blackbird.Applications.Sdk.Common.Exceptions;
using HtmlAgilityPack;

namespace Apps.Hubspot.Utils.Extensions;

public static class HtmlExtensions
{
    private const string BlackbirdReferenceIdAttribute = "blackbird-reference-id";
    private const string BlackbirdContentTypeAttribute = "blackbird-content-type";
    private const string BlackbirdSlugAttribute = "slug";

    public static string AsHtml(this (string title, string metaDescription, string body, string pageId, string slug, string contentType) tuple)
    {
        return
            $"<html>" +
                $"<head>" +
                    $"<title>{tuple.title}</title>" +
                    $"<meta name=\"{BlackbirdReferenceIdAttribute}\" content=\"{tuple.pageId}\">" +
                    $"<meta name=\"{BlackbirdContentTypeAttribute}\" content=\"{tuple.contentType}\">" +
                    $"<meta name=\"{BlackbirdSlugAttribute}\" content=\"{tuple.slug}\">" +
                    $"<description>{tuple.metaDescription}</description>" +
                $"</head>" +
                $"<body>" +
                    $"{tuple.body}" +
                $"</body>" +
            $"</html>";
    }

    public static string GetNodeFromHead(this HtmlDocument doc, string nodeName)
    {
        return GetHtmlText(doc, $"html/head/{nodeName}");
    }
    
    public static string GetSlug(this HtmlDocument doc)
    {
        var slugNode = doc.DocumentNode.SelectSingleNode($"//meta[@name='{BlackbirdSlugAttribute}']");
        if (slugNode == null)
        {
            throw new PluginMisconfigurationException($"HTML file doesn't have {BlackbirdSlugAttribute} meta data. " +
                                                      $"Please make sure this file was generated by our app");
        }

        return slugNode.GetAttributeValue("content", null);
    }

    public static string ExtractContentType(this HtmlDocument document)
    {   
        var metaNode = document.DocumentNode.SelectSingleNode($"//meta[@name='{BlackbirdContentTypeAttribute}']");
        if (metaNode == null)
        {
            throw new PluginMisconfigurationException($"HTML file doesn't have {BlackbirdContentTypeAttribute} meta data. " +
                                                      $"Please make sure this file was generated by our app");
        }

        return metaNode.GetAttributeValue("content", null);
    }

    private static string GetHtmlText(HtmlDocument doc, string xPath)
    {
        return HttpUtility.HtmlDecode(doc.DocumentNode.SelectSingleNode(xPath).InnerText);
    }

    public static HtmlEmailValues ExtractHtmlValuesForEmail(HtmlDocument htmlDoc)
    {
        var titleNode = htmlDoc.DocumentNode.SelectSingleNode("//title");
        var title = titleNode?.InnerText.Trim()
                    ?? throw new PluginApplicationException("The HTML file does not contain a valid title.");

        var bodyNode = htmlDoc.DocumentNode.SelectSingleNode("//body");
        if (bodyNode == null)
        {
            throw new PluginApplicationException("The HTML file does not contain a valid body section.");
        }

        var idNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='id']");
        var nameNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='name']");
        var subjectNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='subject']");
        var sendOnPublishNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='sendOnPublish']");
        var archivedNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='archived']");
        var activeDomainNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='activeDomain']");
        var languageNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='language']");
        var publishDateNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='publishDate']");
        var businessUnitIdNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='businessUnitId']");
        var htmlContentNode = htmlDoc.DocumentNode.SelectSingleNode("//*[@id='htmlContent']");

        return new HtmlEmailValues
        {
            Title = title,
            Body = htmlContentNode?.InnerHtml,
            Id = idNode?.InnerText.Trim(),
            Name = nameNode?.InnerText.Trim(),
            Subject = subjectNode?.InnerText.Trim(),
            SendOnPublish = sendOnPublishNode != null
                            && bool.TryParse(sendOnPublishNode.InnerText.Trim(), out var sendOnPublish)
                ? sendOnPublish
                : (bool?)null,
            Archived = archivedNode != null
                       && bool.TryParse(archivedNode.InnerText.Trim(), out var archived)
                ? archived
                : (bool?)null,
            ActiveDomain = activeDomainNode?.InnerText.Trim(),
            Language = languageNode?.InnerText.Trim(),
            PublishDate = publishDateNode != null
                          && DateTime.TryParse(publishDateNode.InnerText.Trim(), out var publishDate)
                ? publishDate
                : (DateTime?)null,
            BusinessUnitId = businessUnitIdNode?.InnerText.Trim()
        };
    }

    public static HtmlFormValues ExtractHtmlValuesForForm(HtmlDocument htmlDoc)
    {
        var nameMetaNode = htmlDoc.DocumentNode.SelectSingleNode("//meta[@name='name']");
        var titleNode = htmlDoc.DocumentNode.SelectSingleNode("//title");
        var nameNode = titleNode?.InnerText.Trim()
                  ?? nameMetaNode?.GetAttributeValue("content", null)
                  ?? htmlDoc.DocumentNode.SelectSingleNode("//*[@id='name']")?.InnerText.Trim();
        var formName = nameNode ?? "Default Form Name";

        var typeMetaNode = htmlDoc.DocumentNode.SelectSingleNode("//meta[@name='type']");
        var typeNode = typeMetaNode?.GetAttributeValue("content", null)
                       ?? htmlDoc.DocumentNode.SelectSingleNode("//*[@id='type']")?.InnerText.Trim();
        var formType = typeNode ?? "hubspot";

        var languageMetaNode = htmlDoc.DocumentNode.SelectSingleNode("//meta[@name='language']");
        var languageNode = languageMetaNode?.GetAttributeValue("content", null)
                           ?? htmlDoc.DocumentNode.SelectSingleNode("//*[@id='language']")?.InnerText.Trim();
        var language = languageNode ?? "en";

        var archivedMetaNode = htmlDoc.DocumentNode.SelectSingleNode("//meta[@name='archived']");
        var archivedNode = archivedMetaNode?.GetAttributeValue("content", null)?.ToLower()
                           ?? htmlDoc.DocumentNode.SelectSingleNode("//*[@id='archived']")?.InnerText.Trim().ToLower();
        var archived = archivedNode == "true";

        var createMarketingFormRequest = new HtmlFormValues
        {
            Name = formName,
            FormType = formType,
            Language = language,
            Archived = archived
        };

        return createMarketingFormRequest;
    }
}